import { CreateTokenRequest, GatekeeperAPIStatus } from '../types';
export type GatekeeperClientConfig = {
    baseUrl: string;
    queryParams?: Record<string, string>;
    headers?: Record<string, string>;
    stage: string;
    fetchImplementation?: (input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>;
    numRetries?: number;
};
export type GatekeeperRecordResponse = {
    state: GatekeeperAPIStatus;
    payload?: unknown;
};
export type RequestTokenIssuanceResponse = {
    status: number;
    transaction: string;
};
export type RequestTokenResfreshResponse = {
    status: number;
    transaction: string;
};
export default class GatekeeperClient {
    private baseUrl;
    private queryParams;
    private headers;
    private stage;
    private defaultRetryParams;
    private fetchImplementation;
    private fetchWithRetry;
    constructor(gatekeeperClientConfig: GatekeeperClientConfig);
    private addQueryParams;
    private urlForWallet;
    getGatekeeperRecordWithPayload(walletAddress: string): Promise<GatekeeperRecordResponse>;
    getGatekeeperStatus(walletAddress: string): Promise<GatekeeperAPIStatus>;
    requestGatewayTokenFromGatekeeper({ wallet, payload, proof, ownerSigns, }: CreateTokenRequest): Promise<RequestTokenIssuanceResponse>;
    /**
     * Tries to refresh a token.
     * If it fails with a 5xx, handleFetchError will retry a number of times.
     */
    refreshToken({ wallet, payload, proof, ownerSigns, }: CreateTokenRequest): Promise<RequestTokenResfreshResponse>;
}
