"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const solana_gateway_ts_1 = require("@identity.com/solana-gateway-ts");
// @ts-ignore
const react_1 = require("react");
const Badge_svg_1 = __importDefault(require("./Badge.svg"));
// Used to avoid making multiple blockchain calls when rerendering
function usePrevious(value) {
    const ref = (0, react_1.useRef)();
    (0, react_1.useEffect)(() => {
        ref.current = value;
    }, [value]); // Only re-run if value changes
    // Return previous value (happens before update in useEffect above)
    return ref.current;
}
const Badge = ({ connection, gatekeeperNetwork, publicKey }) => {
    const [token, setToken] = (0, react_1.useState)();
    const prevGKN = usePrevious(gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58());
    const prevPubkey = usePrevious(publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58());
    const prevConnectionUrl = usePrevious(connection.rpcEndpoint);
    (0, react_1.useEffect)(() => {
        // only make another call if anything changes, as we cannot
        // rely on useEffect to protect us from this
        if ((gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58()) !== prevGKN ||
            (publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58()) !== prevPubkey ||
            connection.rpcEndpoint !== prevConnectionUrl) {
            // only set the GT if one was found
            (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, gatekeeperNetwork).then((gt) => setToken(gt || undefined));
        }
    }, [gatekeeperNetwork === null || gatekeeperNetwork === void 0 ? void 0 : gatekeeperNetwork.toBase58(), publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58(), connection]);
    return (token === null || token === void 0 ? void 0 : token.state) === solana_gateway_ts_1.State.ACTIVE ? ((0, jsx_runtime_1.jsx)("a", Object.assign({ href: "https://www.civic.com", target: "_blank", rel: "noreferrer", "data-testid": "badgeLink" }, { children: (0, jsx_runtime_1.jsx)(Badge_svg_1.default, {}) }))) : ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {}));
};
exports.default = Badge;
