import { Connection, PublicKey, Transaction } from '@solana/web3.js';
import { State, GatewayProps, Options } from '@civic/common-gateway-react';
import React from 'react';
export interface ConnectionContextValues {
    endpoint: string;
    connection: Connection;
}
export interface SolanaWalletAdapter {
    publicKey: PublicKey | null;
    signTransaction?: (transaction: Transaction) => Promise<Transaction>;
}
/**
 * The properties object passed by the dApp when defining the component
 */
export type SolanaGatewayProviderProps = {
    wallet?: SolanaWalletAdapter;
    gatekeeperNetwork?: PublicKey;
    stage?: string;
    connection: Connection;
    cluster?: string;
    wrapper?: React.FC;
    logo?: string;
    redirectUrl?: string;
    /** @deprecated Please use gatekeeperSendsTransaction instead */
    broadcastTransaction?: boolean;
    gatekeeperSendsTransaction?: boolean;
    handleTransaction?: (transaction: Transaction) => Promise<void>;
    options?: Options;
    children?: React.ReactNode;
    expiryMarginSeconds?: number;
};
export type SolanaGatewayToken = {
    readonly issuingGatekeeper: PublicKey;
    readonly gatekeeperNetworkAddress: PublicKey;
    readonly owner: PublicKey;
    readonly state: State;
    readonly publicKey: PublicKey;
    readonly expiryTime?: number;
};
export type SolanaGatewayProps = Omit<GatewayProps, 'gatewayToken' | 'gatewayTokenTransaction'> & {
    gatewayToken?: SolanaGatewayToken;
    gatewayTokenTransaction?: Transaction;
};
export * from '@civic/common-gateway-react';
